{
	"sk01": {
		"scope": "csharp",
		"prefix": "sk01",
		"body": [
			"public class ResearcherProject",
			"{",
			"\tstatic string searchResultsFileName = \"searchResults.json\";",
			"\tstatic string researchReportFileName = \"ResearchReport.txt\";",
			"",
			"\tpublic async Task ExecuteAsync()",
			"\t{",
			"\t\tvar modelDeploymentName = \"Gpt4v32k\";",
			"\t\tvar azureOpenAIEndpoint = Environment.GetEnvironmentVariable(\"AzureOpenAI_Endpoint\", EnvironmentVariableTarget.User);",
			"\t\tvar azureOpenAIApiKey = Environment.GetEnvironmentVariable(\"AzureOpenAI_ApiKey\", EnvironmentVariableTarget.User);",
			"\t\tstring bingApiKey = Environment.GetEnvironmentVariable(\"Bing_ApiKey\", EnvironmentVariableTarget.User);",
			"",
			"\t\tvar builder = Kernel.CreateBuilder();",
			"\t\tbuilder.Services.AddAzureOpenAIChatCompletion(",
			"\t\t\t\tmodelDeploymentName,",
			"\t\t\t\tazureOpenAIEndpoint,",
			"\t\t\t\tazureOpenAIApiKey,",
			"\t\t\t\tmodelId: \"gpt-4-32k\"",
			"\t\t);",
			"\t\tvar kernel = builder.Build();",
			"",
			"\t}",
			"",
			"}"
		]
	},
	"sk02": {
		"scope": "csharp",
		"prefix": "sk02",
		"body": [
			"\t\t// AddingCustom plugin for web search ",
			"\t\tvar webSearchEnginePlugin = new WebSearchPlugin(bingApiKey);",
			"\t\tvar webSearchEnginePluginName = webSearchEnginePlugin.GetType().Name;",
			"\t\tkernel.ImportPluginFromObject(webSearchEnginePlugin, webSearchEnginePluginName);"
		]
	},
	"sk03": {
		"scope": "csharp",
		"prefix": "sk03",
		"body": [
			"using System.Text.Json;",
			"using System.Text.Json.Serialization;",
			"using Microsoft.SemanticKernel;",
			"using System.ComponentModel;",
			"using System.Diagnostics.CodeAnalysis;",
			"using System.Text.Encodings.Web;",
			"",
			"namespace _07_02e.WebSearch;",
			"",
			"public sealed class WebSearchPlugin",
			"{",
			"\tprivate readonly string _bingApiKey;",
			"\tpublic static readonly HttpClient Client = new HttpClient();",
			"",
			"\tprivate static readonly JsonSerializerOptions s_jsonOptionsCache = new()",
			"\t{",
			"\t\tEncoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping,",
			"\t};",
			"",
			"\tpublic WebSearchPlugin(string bingApiKey)",
			"\t{",
			"\t\t_bingApiKey = bingApiKey;",
			"\t}",
			"",
			"\t[KernelFunction, Description(\"Perform a web search.\")]",
			"\tpublic async Task<string> Search(",
			"\t\t\t[Description(\"Search query\")] string query,",
			"\t\t\t[Description(\"Number of results\")] int count = 20,",
			"\t\t\t[Description(\"Number of results to skip\")] int offset = 0,",
			"\t\t\t[Description(\"Freshness\")] string freshness = \"Week\",",
			"\t\t\tCancellationToken cancellationToken = default)",
			"\t{",
			"\t\tstring result = string.Empty;",
			"",
			"\t\ttry",
			"\t\t{",
			"\t\t\tresult = await WebSearchJSON(query, count, offset, freshness, cancellationToken);",
			"\t\t}",
			"\t\tcatch (Exception ex)",
			"\t\t{",
			"\t\t\tthrow;",
			"\t\t}",
			"",
			"\t\treturn result;",
			"\t}",
			"",
			"\tprivate async Task<string> WebSearchJSON(",
			"\t\t\tstring query,",
			"\t\t\tint numResults,",
			"\t\t\tint offset,",
			"\t\t\tstring freshness,",
			"\t\t\tCancellationToken cancellationToken = default)",
			"\t{",
			"\t\tWebPage[]? results = await WebSearchInternal(query, numResults, offset, freshness);",
			"",
			"\t\treturn JsonSerializer.Serialize(results);",
			"\t}",
			"",
			"\tprivate async Task<WebPage[]?> WebSearchInternal(",
			"\t\tstring query,",
			"\t\tint numResults,",
			"\t\tint offset,",
			"\t\tstring freshness)",
			"\t{",
			"\t\tstring json = string.Empty;",
			"",
			"\t\tUri uri = new(\\$\"https://api.bing.microsoft.com/v7.0/search?q={Uri.EscapeDataString(query)}&count={numResults}&offset={offset}\");",
			"\t\tif (!string.IsNullOrEmpty(freshness))",
			"\t\t{",
			"\t\t\turi = new(\\$\"https://api.bing.microsoft.com/v7.0/search?q={Uri.EscapeDataString(query)}&count={numResults}&offset={offset}&freshness={freshness}\");",
			"\t\t}",
			"",
			"\t\tClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", _bingApiKey);",
			"\t\tjson = await Client.GetStringAsync(uri);",
			"\t\tBingSearchResponse? data = JsonSerializer.Deserialize<BingSearchResponse>(json);",
			"\t\tWebPage[]? results = data?.WebPages?.Value;",
			"",
			"\t\treturn results;",
			"\t}",
			"",
			"\t[SuppressMessage(\"Performance\", \"CA1812:Internal class that is apparently never instantiated\",",
			"\t\t\tJustification = \"Class is instantiated through deserialization.\")]",
			"\tprivate sealed class BingSearchResponse",
			"\t{",
			"\t\t[JsonPropertyName(\"webPages\")]",
			"\t\tpublic WebPages? WebPages { get; set; }",
			"\t}",
			"",
			"\t[SuppressMessage(\"Performance\", \"CA1812:Internal class that is apparently never instantiated\",",
			"\t\t\tJustification = \"Class is instantiated through deserialization.\")]",
			"\tprivate sealed class WebPages",
			"\t{",
			"\t\t[JsonPropertyName(\"value\")]",
			"\t\tpublic WebPage[]? Value { get; set; }",
			"\t}",
			"",
			"\t[SuppressMessage(\"Performance\", \"CA1812:Internal class that is apparently never instantiated\",",
			"\t\t\tJustification = \"Class is instantiated through deserialization.\")]",
			"\tprivate sealed class WebPage",
			"\t{",
			"\t\t[JsonPropertyName(\"name\")]",
			"\t\tpublic string Name { get; set; } = string.Empty;",
			"",
			"\t\t[JsonPropertyName(\"url\")]",
			"\t\tpublic string Url { get; set; } = string.Empty;",
			"",
			"\t\t[JsonPropertyName(\"snippet\")]",
			"\t\tpublic string Snippet { get; set; } = string.Empty;",
			"",
			"\t\t[JsonPropertyName(\"datePublished\")]",
			"\t\tpublic DateTime DatePublished { get; set; } = DateTime.MinValue;",
			"\t}",
			"}"
		]
	},
	"sk04": {
		"scope": "csharp",
		"prefix": "sk04",
		"body": [
			"namespace _07_02e.WebSearch;",
			"",
			"public class WebSearchResult",
			"{",
			"\tpublic string Name { get; set; }",
			"\tpublic string Url { get; set; }",
			"\tpublic string Snippet { get; set; }",
			"\tpublic DateTime DatePublished { get; set; }",
			"\tpublic string PageContent { get; set; }",
			"}"
		]
	},
	"sk05": {
		"scope": "csharp",
		"prefix": "sk05",
		"body": [
			"\tprivate static async Task<List<WebSearchResult>> SearchWithPlugin(",
			"\t\t\tKernel kernel,",
			"\t\t\tstring searchPluginName,",
			"\t\t\tstring question,",
			"\t\t\tint searchResultsCount = 10,",
			"\t\t\tbool retrieveSearchFromFile = false)",
			"\t{",
			"\t\tstring searchResultValue = string.Empty;",
			"",
			"\t\tif (!retrieveSearchFromFile)",
			"\t\t{",
			"\t\t\tConsole.WriteLine(question);",
			"\t\t\tConsole.WriteLine(\\$\"----{searchPluginName}----\");",
			"",
			"\t\t\tvar searchResult =",
			"\t\t\t\t\tawait kernel.InvokeAsync(searchPluginName, \"Search\", new() {",
			"\t\t\t\t\t\t\t{ \"query\", question },",
			"\t\t\t\t\t\t\t{ \"count\", searchResultsCount },",
			"\t\t\t\t\t\t\t{ \"offset\", 0 },",
			"\t\t\t\t\t\t\t{ \"freshness\", \"Week\" }",
			"\t\t\t\t\t});",
			"",
			"\t\t\tConsole.WriteLine(searchResult);",
			"\t\t\tsearchResultValue = searchResult.GetValue<string>();",
			"",
			"\t\t\t// Save the search result",
			"\t\t\tawait File.WriteAllTextAsync(searchResultsFileName, searchResultValue);",
			"\t\t}",
			"\t\telse",
			"\t\t{",
			"\t\t\t// Retrieve the search result",
			"\t\t\tsearchResultValue = await File.ReadAllTextAsync(searchResultsFileName);",
			"\t\t}",
			"\t\t",
			"\t}"
		]
	},
	"sk06": {
		"scope": "csharp",
		"prefix": "sk06",
		"body": [
			"\tprivate static List<WebSearchResult> DeserializeWebSearchResults(string json)",
			"\t{",
			"\t\tvar options = new JsonSerializerOptions",
			"\t\t{",
			"\t\t\tPropertyNameCaseInsensitive = true // This makes the parser case-insensitive to property names",
			"\t\t};",
			"",
			"\t\tList<WebSearchResult> webSearchResults =",
			"\t\t\t\tJsonSerializer.Deserialize<List<WebSearchResult>>(json, options);",
			"",
			"\t\treturn webSearchResults;",
			"\t}"
		]
	},
	"sk07": {
		"scope": "csharp",
		"prefix": "sk07",
		"body": [
			"\t\t// Parse into array of objects",
			"\t\tList<WebSearchResult> webSearchResults = DeserializeWebSearchResults(searchResultValue);",
			"",
			"\t\treturn webSearchResults;"
		]
	},
	"sk08": {
		"scope": "csharp",
		"prefix": "sk08",
		"body": [
			"\t\tvar topicOfResearch = \"What are the latest generative AI models and advancements for the last week?\";",
			"\t\tList<WebSearchResult> webSearchResults = await SearchWithPlugin(",
			"\t\t\t\tkernel,",
			"\t\t\t\twebSearchEnginePluginName,",
			"\t\t\t\ttopicOfResearch,",
			"\t\t\t\t10,",
			"\t\t\t\tfalse);"
		]
	}
}