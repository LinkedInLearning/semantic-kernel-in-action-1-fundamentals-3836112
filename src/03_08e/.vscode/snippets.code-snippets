{
  "sk01": {
    "scope": "csharp",
    "prefix": "sk01",
    "body": [
      "   var modelDeploymentName = \"Gpt4v32k\";",
      "   var azureOpenAIEndpoint = Environment.GetEnvironmentVariable(\"AZUREOPENAI_ENDPOINT\");",
      "   var azureOpenAIApiKey = Environment.GetEnvironmentVariable(\"AZUREOPENAI_APIKEY\");",
      "",
      "   var builder = Kernel.CreateBuilder();",
      "   builder.Services.AddAzureOpenAIChatCompletion(",
      "       modelDeploymentName,",
      "       azureOpenAIEndpoint,",
      "       azureOpenAIApiKey,",
      "       modelId: \"gpt-4-32k\"",
      "   );",
      "   var kernel = builder.Build();"
    ]
  },
  "sk02": {
    "scope": "csharp",
    "prefix": "sk02",
    "body": [
      "    // Create agenda",
      "    List<string> todaysCalendar = [\"8am - wakeup\", \"9am - work\", \"12am - lunch\", \"1pm - work\", \"6pm - exercise\", \"7pm - study\", \"10pm - sleep\"];",
      ""
    ]
  },
  "sk03": {
    "scope": "csharp",
    "prefix": "sk03",
    "body": [
      "   var handlebarsTemplate = @\"",
      "                   Please explain in a fun way the day agenda",
      "                   {{ set \"\"dayAgenda\"\" (todaysCalendar)}}",
      "                   {{ set \"\"whatTimeIsIt\"\" (WhatTimeIsIt-Time) }}",
      "",
      "                   {{#each dayAgenda}}",
      "                       Explain what you are doing at {{this}} in a fun way.",
      "                   {{/each}}",
      "",
      "                   Explain what you will be doing next at {{whatTimeIsIt}} in a fun way.\";"
    ]
  },
  "sk03b": {
    "scope": "csharp",
    "prefix": "sk03b",
    "body": [
      "public class WhatTimeIsIt",
      "{",
      "\t[KernelFunction, Description(\"Get the current time\")]",
      "\tpublic string Time(IFormatProvider? formatProvider = null) =>",
      "\t\t\tDateTimeOffset.Now.ToString(\"hh:mm:ss tt\", formatProvider);",
      "}",
      ""
    ]
  },
  "sk05": {
    "scope": "csharp",
    "prefix": "sk05",
    "body": [
      "var todaysFunCalendar = await kernel.InvokeAsync(",
      "    handlebarsFunction,",
      "    new() {",
      "      { \"todaysCalendar\", todaysCalendar }",
      "    }",
      ");"
    ]
  },
  "sk04": {
    "scope": "csharp",
    "prefix": "sk04",
    "body": [
      "\t// Create handlebars template for intent",
      "\tvar handlebarsFunction = kernel.CreateFunctionFromPrompt(",
      "\t\tnew PromptTemplateConfig()",
      "\t\t{",
      "\t\t  Template = handlebarsTemplate,",
      "\t\t  TemplateFormat = \"handlebars\"",
      "\t\t},",
      "\t\tnew HandlebarsPromptTemplateFactory()",
      "\t);"
    ]
  }
}