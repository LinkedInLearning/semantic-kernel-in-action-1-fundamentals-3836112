{
	"sk01": {
		"scope": "csharp",
		"prefix": "sk01",
		"body": [
			"\t\tvar openAIFunctionEnabledModelId = \"gpt-4-turbo-preview\";",
			"\t\tvar openAIApiKey = Environment.GetEnvironmentVariable(\"OPENAI_APIKEY\");",
			"\t\tvar builder = Kernel.CreateBuilder();",
			"\t\tbuilder.Services.AddOpenAIChatCompletion(",
			"\t\t\t\topenAIFunctionEnabledModelId,",
			"\t\t\t\topenAIApiKey);",
			"\t\tvar kernel = builder.Build();"
		]
	},
	"sk02": {
		"scope": "csharp",
		"prefix": "sk02",
		"body": [
			"\t\t// Create agents",
			"\t\t// Marketing Editor agent => Reviews slogan, provides feedback and gives the FINAL APPROVAL",
			"\t\tvar editorAgent =",
			"\t\t\t\tTrack(",
			"\t\t\t\t\t\tawait new AgentBuilder()",
			"\t\t\t\t\t\t\t\t.WithOpenAIChatCompletion(openAIFunctionEnabledModelId, openAIApiKey)",
			"\t\t\t\t\t\t\t\t.WithInstructions(\"You are a professional editor with a profound expertise in crafting and refining content for marketing. You are deeply passionate about the intersection of technology and storytelling and love when words ryhme together. Your goal is to determine if a marketing slogan is acceptable, even if it isn't perfect.\tIf not, provide constructive insights on how to improve the slogan without providing an example.\tRespond to the most recent message by evaluating and providing feedback without giving any example.\tAlways repeat the slogan at the beginning.\tIf the slogan is is acceptable and meets your criteria, say: I APPROVE.\")",
			"\t\t\t\t\t\t\t\t.WithName(\"Marketing Editor\")",
			"\t\t\t\t\t\t\t\t.WithDescription(\"Marketing Editor\")",
			"\t\t\t\t\t\t\t\t.BuildAsync());",
			"",
			"\t\t// Marketing Writer Agent => generates ideas",
			"\t\tvar writerAgent =",
			"\t\t\t\tTrack(",
			"\t\t\t\t\t\tawait new AgentBuilder()",
			"\t\t\t\t\t\t\t\t.WithOpenAIChatCompletion(openAIFunctionEnabledModelId, openAIApiKey)",
			"\t\t\t\t\t\t\t\t.WithInstructions(\"You are a marketing writer with some years of experience, you like efficiency of words and sarcasm. You like to deliver greatness and do your outmost always. Your goal is given an idea description to provide a Marketing slogan. If feedback is provided, take it into consideration to improve the Slogan.\")",
			"\t\t\t\t\t\t\t\t.WithName(\"Marketing Writer\")",
			"\t\t\t\t\t\t\t\t.WithDescription(\"Marketing Writer\")",
			"\t\t\t\t\t\t\t\t.BuildAsync());",
			"",
			"\t\t// Create coordinator agent to oversee collaboration",
			"\t\tvar coordinatorAgent =",
			"\t\t\t\tTrack(",
			"\t\t\t\t\t\tawait new AgentBuilder()",
			"\t\t\t\t\t\t\t\t.WithOpenAIChatCompletion(openAIFunctionEnabledModelId, openAIApiKey)",
			"\t\t\t\t\t\t\t\t.WithInstructions(\"Reply the provided Slogan and have the Marketing writer generate a Slogan. Then have the Marketing Editor review and reply to the marketing writer with feedback on the Slogan. Always include the source Slogan in all the messages.\tAlways include the Marketing Editor feedback when interacting with the Marketing Writer. Coordinate the flow of replies between the marketing writer and the marketing editor until the Marketing Editor approves the Slogan.\")",
			"\t\t\t\t\t\t\t\t.WithPlugin(writerAgent.AsPlugin())",
			"\t\t\t\t\t\t\t\t.WithPlugin(editorAgent.AsPlugin())",
			"\t\t\t\t\t\t\t\t.BuildAsync());"
		]
	},
	"sk03": {
		"scope": "csharp",
		"prefix": "sk03",
		"body": [
			"\t\t// note that threads aren't attached to specific agents",
			"\t\t_agentsThread = await coordinatorAgent.NewThreadAsync();",
			"",
			"\t\tstring ideaToEllaborate = \"concept: AI Agents that can write twitter and LinkedIn\" +",
			"\t\t\t\t\" messages and blog posts with the style of an author.\";"
		]
	},
	"sk04": {
		"scope": "csharp",
		"prefix": "sk04",
		"body": [
			"\tprivate IAgent Track(IAgent agent)",
			"\t{",
			"\t\t_agents.Add(agent);",
			"",
			"\t\treturn agent;",
			"\t}",
			"",
			"\tprivate void DisplayMessages(IEnumerable<IChatMessage> messages, IAgent? agent = null)",
			"\t{",
			"\t\tforeach (var message in messages)",
			"\t\t{",
			"\t\t\tDisplayMessage(message, agent);",
			"\t\t}",
			"\t}",
			"",
			"\tprivate void DisplayMessage(IChatMessage message, IAgent? agent = null)",
			"\t{",
			"\t\tConsole.WriteLine(\\$\"[{message.Id}]\");",
			"\t\tif (agent != null)",
			"\t\t{",
			"\t\t\tConsole.WriteLine(\\$\"# {message.Role}: ({agent.Name}) {message.Content}\");",
			"\t\t}",
			"\t\telse",
			"\t\t{",
			"\t\t\tConsole.WriteLine(\\$\"# {message.Role}: {message.Content}\");",
			"\t\t}",
			"\t}",
			"\tprivate async Task CleanUpAsync()",
			"\t{",
			"\t\tif (_agentsThread != null)",
			"\t\t{",
			"\t\t\t_agentsThread.DeleteAsync();",
			"\t\t\t_agentsThread = null;",
			"\t\t}",
			"",
			"\t\tif (_agents.Any())",
			"\t\t{",
			"\t\t\tawait Task.WhenAll(_agents.Select(agent => agent.DeleteAsync()));",
			"\t\t\t_agents.Clear();",
			"\t\t}",
			"\t\tConsole.WriteLine(\"Cleaned up agents and threads.\");",
			"\t}"
		]
	},
	"sk05": {
		"scope": "csharp",
		"prefix": "sk05",
		"body": [
			"\t\ttry",
			"\t\t{",
			"\t\t\t// We delegate the messages to the coordinatorAgent who takes care of the coordination and delegates & oversees their subordinate plugin agents",
			"\t\t\tbool useCoordinator = false;",
			"",
			"\t\t\tif (useCoordinator)",
			"\t\t\t{",
			"\t\t\t\tvar responseMessages =",
			"\t\t\t\t\t\tawait _agentsThread.InvokeAsync(",
			"\t\t\t\t\t\t\t\tcoordinatorAgent,",
			"\t\t\t\t\t\t\t\tideaToEllaborate)",
			"\t\t\t\t\t\t\t\t.ToArrayAsync();",
			"\t\t\t\tDisplayMessages(responseMessages, coordinatorAgent);",
			"\t\t\t}",
			"\t\t\telse",
			"\t\t\t{",
			"\t\t\t}",
			"\t\t}",
			"\t\tfinally",
			"\t\t{",
			"\t\t\tawait CleanUpAsync();",
			"\t\t}"
		]
	},
	"sk06": {
		"scope": "csharp",
		"prefix": "sk06",
		"body": [
			"\t\t\t\tvar messageUser = await _agentsThread.AddUserMessageAsync(ideaToEllaborate);",
			"\t\t\t\tDisplayMessage(messageUser);",
			"",
			"\t\t\t\tbool isComplete = false;",
			"\t\t\t\tdo",
			"\t\t\t\t{",
			"\t\t\t\t\tvar agentMessages = await _agentsThread.InvokeAsync(writerAgent).ToArrayAsync();",
			"\t\t\t\t\tDisplayMessages(agentMessages, writerAgent);",
			"",
			"\t\t\t\t\tagentMessages = await _agentsThread.InvokeAsync(editorAgent).ToArrayAsync();",
			"\t\t\t\t\tDisplayMessages(agentMessages, editorAgent);",
			"",
			"\t\t\t\t\tif (agentMessages.First().Content.Contains(\"I APPROVE\", StringComparison.OrdinalIgnoreCase))",
			"\t\t\t\t\t{",
			"\t\t\t\t\t\tisComplete = true;",
			"\t\t\t\t\t}",
			"\t\t\t\t}",
			"\t\t\t\twhile (!isComplete);"
		]
	}
}